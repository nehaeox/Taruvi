# =============================================================================
# TARUVI PLATFORM - ENVIRONMENT CONFIGURATION TEMPLATE
# =============================================================================
# Copy this file to .env and configure with your actual values
# Never commit .env with sensitive credentials to version control
# =============================================================================

# =============================================================================
# DJANGO CORE SETTINGS
# =============================================================================
# Secret key for Django cryptographic signing
# Generate a secure key: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
# SECURITY WARNING: Keep this secret in production!
SECRET_KEY=your-secret-key-here-min-50-characters-long

# Debug mode - MUST be False in production
# Options: True, False
DEBUG=True

# Allowed hosts - comma-separated list of domains/IPs
# Development example: 127.0.0.1.nip.io,*.127.0.0.1.nip.io,localhost,127.0.0.1
# Production example: yourdomain.com,*.yourdomain.com,api.yourdomain.com
ALLOWED_HOSTS=*

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL database settings
# Required for multi-tenant schema support
DB_NAME=taruvi
DB_USER=postgres
DB_PASSWORD=your-secure-password
DB_HOST=db
DB_PORT=5432

# =============================================================================
# JWT AUTHENTICATION SETTINGS
# =============================================================================
# Access token lifetime in minutes (recommended: 15-60)
JWT_ACCESS_TOKEN_LIFETIME=15

# Refresh token lifetime in days (recommended: 7-30)
JWT_REFRESH_TOKEN_LIFETIME=7

# Rotate refresh tokens on use (recommended: True)
JWT_ROTATE_REFRESH_TOKEN=True

# Blacklist tokens after rotation (recommended: True for security)
JWT_BLACKLIST_AFTER_ROTATION=True

# =============================================================================
# CORS CONFIGURATION
# =============================================================================
# Comma-separated list of allowed origins for Cross-Origin Resource Sharing
# Add your frontend application URLs here
# Example: http://localhost:3000,https://app.yourdomain.com
CORS_ALLOWED_ORIGINS=https://*

# =============================================================================
# RATE LIMITING
# =============================================================================
# Enable API rate limiting (recommended: True in production)
RATE_LIMIT_ENABLE=True

# Rate limit: maximum requests per minute per IP address
API_RATE_LIMIT_PER_MINUTE=100

# Burst protection: maximum requests in a short burst
API_RATE_LIMIT_BURST=10

# =============================================================================
# SECURITY HEADERS
# =============================================================================
# Enable security headers (HSTS, XSS protection, etc.)
# Recommended: True in production
SECURITY_HEADERS_ENABLE=True

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
# Development: DEBUG or INFO
# Production: WARNING or ERROR
LOG_LEVEL=INFO

# Log format: 'json' for structured logging, 'standard' for human-readable
# Production recommendation: json
LOG_FORMAT=json

# Maximum log file size before rotation
# Examples: 10MB, 50MB, 100MB, 1GB
LOG_MAX_SIZE=10MB

# Number of backup log files to keep after rotation
LOG_BACKUP_COUNT=5

# =============================================================================
# CELERY TASK QUEUE CONFIGURATION
# =============================================================================
# Broker type determines the message queue system
# Options: sqs (AWS SQS), redis, rabbitmq, django (database)
# Development: django or redis
# Production: sqs or redis
CELERY_BROKER_TYPE=sqs

# Optional: Explicit Celery broker URL
# This overrides CELERY_BROKER_TYPE if set
# Examples:
#   SQS: sqs://
#   Redis: redis://localhost:6379/0
#   RabbitMQ: amqp://user:password@localhost//
# CELERY_BROKER_URL=

# Celery result backend (where task results are stored)
# Options: django-db, redis, or database URL
CELERY_RESULT_BACKEND=django-db

# SQS queue name prefix (used when CELERY_BROKER_TYPE=sqs)
# Helps organize queues in AWS SQS console
CELERY_QUEUE_PREFIX=taruvi-

# Redis URL (used when CELERY_BROKER_TYPE=redis or for caching)
# REDIS_URL=redis://localhost:6379/0

# RabbitMQ URL (used when CELERY_BROKER_TYPE=rabbitmq)
# RABBITMQ_URL=amqp://guest:password@localhost//

# =============================================================================
# AWS CONFIGURATION
# =============================================================================
# AWS credentials for S3 storage and SQS messaging
# Leave empty to use IAM roles (recommended for EC2/ECS) or AWS CLI credentials
AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

# S3 bucket name for static and media file storage
AWS_STORAGE_BUCKET_NAME=your-bucket-name

# AWS region where your resources are located
# Examples: us-east-1, us-west-2, eu-west-1, ap-southeast-1
AWS_S3_REGION_NAME=us-east-1

# CloudFront custom domain (optional, for CDN acceleration)
# Example: d123456789abcd.cloudfront.net
AWS_S3_CUSTOM_DOMAIN=

# S3 Access Control List for uploaded files
# Options: public-read, private, authenticated-read
AWS_DEFAULT_ACL=public-read

# Use S3 for static and media files
# Development: False (uses local storage)
# Production: True (uses AWS S3)
USE_S3=False

# =============================================================================
# MULTI-TENANT CONFIGURATION
# =============================================================================
# Public schema name (default PostgreSQL schema for platform data)
# Usually should remain 'public' unless you have specific requirements
PUBLIC_SCHEMA_NAME=public

# =============================================================================
# OPENTELEMETRY (DISTRIBUTED TRACING)
# =============================================================================
# Enable OpenTelemetry distributed tracing
# Useful for monitoring microservices and performance analysis
OTEL_ENABLED=False

# Service name identifier for tracing
OTEL_SERVICE_NAME=taruvi-django

# Service version for tracing
OTEL_SERVICE_VERSION=1.0.0

# Exporter type: console (logs), jaeger, otlp (OpenTelemetry Protocol)
OTEL_EXPORTER_TYPE=console

# Jaeger endpoint (if using Jaeger for tracing visualization)
OTEL_EXPORTER_JAEGER_ENDPOINT=http://localhost:14268/api/traces

# OTLP endpoint (if using OTLP collector)
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317

# Additional resource attributes in key=value format
# Example: environment=production,region=us-east-1
OTEL_RESOURCE_ATTRIBUTES=

# =============================================================================
# SENTRY ERROR TRACKING
# =============================================================================
# Enable Sentry for error tracking and performance monitoring
SENTRY_ENABLED=False

# Sentry DSN (Data Source Name)
# Get this from your Sentry project settings
# Required if SENTRY_ENABLED=True
# SENTRY_DSN=https://examplePublicKey@o0.ingest.sentry.io/0

# Percentage of transactions to send to Sentry (0.0 to 1.0)
# 1.0 = 100% of transactions, 0.1 = 10% of transactions
# Start with lower values in production to control costs
SENTRY_TRACES_SAMPLE_RATE=0.1

# =============================================================================
# PROMETHEUS METRICS
# =============================================================================
# Enable Prometheus metrics endpoint at /metrics
# Useful for Grafana dashboards and monitoring
PROMETHEUS_METRICS_ENABLED=False

# =============================================================================
# EMAIL CONFIGURATION (SendGrid SMTP)
# =============================================================================
# SendGrid API key for sending transactional emails
# Get this from SendGrid dashboard: https://app.sendgrid.com/settings/api_keys
SENDGRID_API_KEY=SG.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Default sender email address for outgoing emails
# Must be verified in SendGrid
DEFAULT_FROM_EMAIL=noreply@yourdomain.com

# Number of days before organization invitations expire
INVITATION_EXPIRES_DAYS=7

# =============================================================================
# CACHING CONFIGURATION
# =============================================================================
# Redis URL for production caching and sessions
# Only used when DEBUG=False (production mode)
# Format: redis://[username:password@]host:port/database
# Example: redis://localhost:6379/1
REDIS_URL=redis://localhost:6379/1

# Enable ORM query caching with django-cachalot
# Automatically caches database queries for improved performance
# Recommended: False for development, True for production
ORM_CACHE_ENABLED=False