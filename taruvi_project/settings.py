"""
Django settings for taruvi_project project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Environment variables
env = environ.Env(
    DEBUG=(bool, False)
)

# Take environment variables from .env file
environ.Env.read_env(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='django-insecure-change-me-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

# Allow nip.io wildcard domains for dynamic tenant routing
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'jazzmin'
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third party apps
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "django_celery_beat",
    "django_celery_results",
    "storages",
    "debug_toolbar",
    "django_tenants",
    # "django.contrib.sites",  # Required for django-allauth (when enabled)
    # "allauth",  # Disabled by default
    # "allauth.account",
    # "allauth.socialaccount",
    "drf_spectacular",
    "django_extensions",
    "simple_history",
    "health_check",
    "health_check.db",
    "health_check.cache",
    "health_check.storage",
    "health_check.contrib.redis",
    "health_check.contrib.celery",

    # Local apps
    "core",
    'cloud_site',
    'cloud_site.app'
    'cloud_site.functions'
    'cloud_site.frontend'

]

MIDDLEWARE = [
    "django_tenants.middleware.main.TenantMainMiddleware",
    "taruvi_project.middleware.CorrelationIdMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # Required for django-allauth
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "taruvi_project.middleware.SecurityLoggingMiddleware",
    "taruvi_project.middleware.APILoggingMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = "taruvi_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # Include project-level templates
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "taruvi_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django_tenants.postgresql_backend",
        "NAME": env('DB_NAME', default='taruvi_db'),
        "USER": env('DB_USER', default=''),
        "PASSWORD": env('DB_PASSWORD', default=''),
        "HOST": env('DB_HOST', default='localhost'),
        "PORT": env('DB_PORT', default='5432'),
    }
}

DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# WhiteNoise configuration for serving static files (when not using S3)
# Only use WhiteNoise storage in production, not in development
if not env.bool('USE_S3', default=False) and not DEBUG:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}


# Simple JWT Configuration
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=env.int('JWT_ACCESS_TOKEN_LIFETIME', default=15)),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=env.int('JWT_REFRESH_TOKEN_LIFETIME', default=7)),
    'ROTATE_REFRESH_TOKENS': env.bool('JWT_ROTATE_REFRESH_TOKEN', default=True),
    'BLACKLIST_AFTER_ROTATION': env.bool('JWT_BLACKLIST_AFTER_ROTATION', default=True),
    'UPDATE_LAST_LOGIN': True,
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# DRF Spectacular (OpenAPI) Configuration
SPECTACULAR_SETTINGS = {
    'TITLE': 'Taruvi API',
    'DESCRIPTION': 'Enterprise Django SaaS Platform API',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SORT_OPERATIONS': False,
    'ENUM_NAME_OVERRIDES': {
        'ValidationErrorEnum': 'drf_spectacular.types.ErrorDetail',
    },
    'POSTPROCESSING_HOOKS': [
        'drf_spectacular.hooks.postprocess_schema_enums'
    ],
    'SCHEMA_PATH_PREFIX': '/api/',
    'SERVE_PERMISSIONS': ['rest_framework.permissions.AllowAny'],  # TODO: Change to IsAuthenticated for production
    'SERVE_AUTHENTICATION': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
    },
    'OAUTH2_FLOWS': [],
    'OAUTH2_AUTHORIZATION_URL': None,
    'OAUTH2_TOKEN_URL': None,
    'OAUTH2_REFRESH_URL': None,
    'OAUTH2_SCOPES': None,
}

# CORS settings
CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[
    "http://localhost:3000",
    "http://127.0.0.1:3000",
])

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only allow all origins in debug mode

# Rate Limiting Configuration
RATE_LIMIT_ENABLE = env.bool('RATE_LIMIT_ENABLE', default=True)
API_RATE_LIMIT_PER_MINUTE = env.int('API_RATE_LIMIT_PER_MINUTE', default=100)
API_RATE_LIMIT_BURST = env.int('API_RATE_LIMIT_BURST', default=10)

# Security Headers Configuration
SECURITY_HEADERS_ENABLE = env.bool('SECURITY_HEADERS_ENABLE', default=True)

if SECURITY_HEADERS_ENABLE:
    # Security middleware settings
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
    
    # Content Security Policy
    CSP_DEFAULT_SRC = ["'self'"]
    CSP_SCRIPT_SRC = ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
    CSP_STYLE_SRC = ["'self'", "'unsafe-inline'"]
    CSP_IMG_SRC = ["'self'", "data:", "https:"]
    CSP_FONT_SRC = ["'self'", "https:"]
    CSP_CONNECT_SRC = ["'self'"]
    CSP_FRAME_SRC = ["'none'"]
    CSP_OBJECT_SRC = ["'none'"]
    CSP_BASE_URI = ["'self'"]
    CSP_FORM_ACTION = ["'self'"]
    
    if not DEBUG:
        # Production security settings
        SECURE_SSL_REDIRECT = True
        SECURE_HSTS_SECONDS = 31536000
        SECURE_HSTS_INCLUDE_SUBDOMAINS = True
        SECURE_HSTS_PRELOAD = True
        SESSION_COOKIE_SECURE = True
        CSRF_COOKIE_SECURE = True
        CSRF_COOKIE_HTTPONLY = True
        SESSION_COOKIE_HTTPONLY = True
        SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Security settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Logging configuration with rolling logs and structured JSON
import logging.handlers

LOG_LEVEL = env('LOG_LEVEL', default='INFO')
LOG_FORMAT = env('LOG_FORMAT', default='json')  # 'json' or 'standard'
LOG_MAX_SIZE = env('LOG_MAX_SIZE', default='10MB')
LOG_BACKUP_COUNT = env.int('LOG_BACKUP_COUNT', default=5)

def parse_log_size(size_str):
    """Parse log size string like '10MB' to bytes"""
    size_str = size_str.upper()
    if size_str.endswith('KB'):
        return int(size_str[:-2]) * 1024
    elif size_str.endswith('MB'):
        return int(size_str[:-2]) * 1024 * 1024
    elif size_str.endswith('GB'):
        return int(size_str[:-2]) * 1024 * 1024 * 1024
    else:
        return int(size_str)

# Base formatters
formatters_config = {
    'verbose': {
        'format': '{levelname} {asctime} {name} {module}:{funcName}:{lineno} {message}',
        'style': '{',
    },
    'simple': {
        'format': '{levelname} {asctime} {message}',
        'style': '{',
    },
}

# Configure log file paths
logs_dir = BASE_DIR / 'logs'
logs_dir.mkdir(exist_ok=True)

# Parse log size
max_log_size = parse_log_size(LOG_MAX_SIZE)

# Base handlers configuration
handlers_config = {
    'console': {
        'level': 'DEBUG' if DEBUG else 'INFO',
        'class': 'logging.StreamHandler',
        'formatter': 'simple' if DEBUG else 'verbose',
    },
    'django_file': {
        'level': LOG_LEVEL,
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': logs_dir / 'django.log',
        'maxBytes': max_log_size,
        'backupCount': LOG_BACKUP_COUNT,
        'formatter': 'verbose',
    },
    'celery_file': {
        'level': LOG_LEVEL,
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': logs_dir / 'celery.log',
        'maxBytes': max_log_size,
        'backupCount': LOG_BACKUP_COUNT,
        'formatter': 'verbose',
    },
    'security_file': {
        'level': 'INFO',
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': logs_dir / 'security.log',
        'maxBytes': max_log_size,
        'backupCount': LOG_BACKUP_COUNT,
        'formatter': 'verbose',
    },
    'api_file': {
        'level': LOG_LEVEL,
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': logs_dir / 'api.log',
        'maxBytes': max_log_size,
        'backupCount': LOG_BACKUP_COUNT,
        'formatter': 'verbose',
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': formatters_config,
    'handlers': handlers_config,
    'root': {
        'handlers': ['console', 'django_file'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'django_file'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'celery': {
            'handlers': ['console', 'celery_file'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'celery.task': {
            'handlers': ['console', 'celery_file'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'security': {
            'handlers': ['console', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'api': {
            'handlers': ['console', 'api_file'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'django_ratelimit': {
            'handlers': ['security_file'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}

# Celery Configuration - Auto-generate SQS broker URL or use custom broker
def get_celery_broker_url():
    """
    Generate Celery broker URL based on configuration.
    Priority: CELERY_BROKER_URL > AWS SQS > Redis > Django DB fallback
    """
    # 1. If CELERY_BROKER_URL is explicitly set, use it
    broker_url = env('CELERY_BROKER_URL', default=None)
    if broker_url:
        return broker_url
    
    # 2. Check for broker type preference
    broker_type = env('CELERY_BROKER_TYPE', default='sqs').lower()
    
    if broker_type == 'sqs':
        # Auto-generate SQS broker URL from AWS credentials
        aws_access_key_id = env('AWS_ACCESS_KEY_ID', default=None)
        aws_secret_access_key = env('AWS_SECRET_ACCESS_KEY', default=None)
        
        if aws_access_key_id and aws_secret_access_key:
            from urllib.parse import quote_plus
            # URL encode the secret key to handle special characters
            encoded_secret = quote_plus(aws_secret_access_key)
            return f'sqs://{aws_access_key_id}:{encoded_secret}@'
        else:
            # Fallback to anonymous SQS (uses IAM role or default credentials)
            return 'sqs://'
    
    elif broker_type == 'redis':
        # Redis broker URL
        redis_url = env('REDIS_URL', default='redis://localhost:6379/0')
        return redis_url
    
    elif broker_type == 'rabbitmq':
        # RabbitMQ broker URL
        rabbitmq_url = env('RABBITMQ_URL', default='amqp://guest@localhost//')
        return rabbitmq_url
    
    else:
        # Fallback to Django DB (for development/testing)
        return 'django://'

CELERY_BROKER_URL = get_celery_broker_url()
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='django-db')

# SQS Configuration (when using SQS as broker)
if 'sqs://' in CELERY_BROKER_URL:
    CELERY_BROKER_TRANSPORT_OPTIONS = {
        'region': env('AWS_S3_REGION_NAME', default='us-east-2'),
        'visibility_timeout': 300,
        'polling_interval': 0.3,
        'queue_name_prefix': env('CELERY_QUEUE_PREFIX', default='taruvi-'),
    }

# Celery task settings
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# Celery Beat settings (for periodic tasks)
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Celery task routing (optional - for multiple queues)
CELERY_TASK_ROUTES = {
    'core.tasks.send_email_task': {'queue': 'emails'},
    'core.tasks.process_data_task': {'queue': 'data_processing'},
}

# Celery worker settings
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_ACKS_LATE = True

# AWS S3 Configuration
AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID', default='')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY', default='')
AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME', default='')
AWS_S3_REGION_NAME = env('AWS_S3_REGION_NAME', default='us-east-1')
AWS_S3_CUSTOM_DOMAIN = env('AWS_S3_CUSTOM_DOMAIN', default='')
AWS_DEFAULT_ACL = env('AWS_DEFAULT_ACL', default='public-read')
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

# Static and Media files storage configuration
USE_S3 = env.bool('USE_S3', default=False)

if USE_S3:
    # S3 Static files storage
    AWS_STATIC_LOCATION = 'static'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_STATIC_LOCATION}/' if AWS_S3_CUSTOM_DOMAIN else f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/{AWS_STATIC_LOCATION}/'
    
    # S3 Media files storage
    AWS_MEDIA_LOCATION = 'media'
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_MEDIA_LOCATION}/' if AWS_S3_CUSTOM_DOMAIN else f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/{AWS_MEDIA_LOCATION}/'
else:
    # Local storage (development)
    STATIC_URL = "/static/"
    STATIC_ROOT = BASE_DIR / "staticfiles"
    MEDIA_URL = "/media/"
    MEDIA_ROOT = BASE_DIR / "media"

# Django Debug Toolbar Configuration
if DEBUG:
    import socket
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + ["127.0.0.1", "10.0.2.2"]

# Django Tenants Configuration
TENANT_MODEL = "core.Site"
TENANT_DOMAIN_MODEL = "core.Domain"

SHARED_APPS = [
    'jazzmin',
    'django_tenants',
    # 'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for django-allauth
    
    # Third party shared apps
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_celery_beat',
    'django_celery_results',
    'storages',
    'debug_toolbar',
    'drf_spectacular',
    'django_extensions',
    'simple_history',
    'health_check',
    'health_check.db',
    'health_check.cache',
    'health_check.storage',
    'health_check.contrib.redis',
    'health_check.contrib.celery',
    
    # Django Allauth (Shared for platform-wide auth provider management)
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # Social providers (extensible)
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.microsoft',
    'allauth.socialaccount.providers.openid_connect',
    
    # Django Guardian (object-level permissions)
    'guardian',
    
    # Your shared apps
    'core',
    'core.storage',
]

TENANT_APPS = [
    # Core Django apps needed for tenant-specific functionality
    'django.contrib.admin',         # Tenant-specific admin interface
    'django.contrib.auth',          # Project-specific users and permissions
    'django.contrib.contenttypes',  # For tenant-specific content types
    'django.contrib.sessions',      # Project-specific sessions
    'django.contrib.messages',      # For admin messaging
    'django.contrib.staticfiles',   # For serving static files in tenant admin
    # Future tenant-specific apps (add as you build features)
    # 'projects',      # Project settings, configurations
    # 'tasks',         # Project tasks, workflows
    # 'files',         # Project file uploads/storage
    # 'analytics',     # Project-specific analytics
    # 'integrations',  # Project webhooks, API keys
    # 'billing',       # Project-specific billing data
    # 'notifications', # Project notifications
    'cloud_site',
    'cloud_site.app',
    'cloud_site.functions',
    'cloud_site.frontend'

]

INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

# Public schema name
PUBLIC_SCHEMA_NAME = env('PUBLIC_SCHEMA_NAME', default='public')

# Default tenant settings
# TENANT_CREATION_FAKES_MIGRATIONS = False
# TENANT_BASE_SCHEMA = 'public'  # Required when TENANT_CREATION_FAKES_MIGRATIONS is True
TENANT_LIMIT_SET_CALLS = True

# OpenTelemetry Configuration
OTEL_ENABLED = env.bool('OTEL_ENABLED', default=True)
OTEL_SERVICE_NAME = env('OTEL_SERVICE_NAME', default='taruvi-django')
OTEL_SERVICE_VERSION = env('OTEL_SERVICE_VERSION', default='1.0.0')
OTEL_EXPORTER_TYPE = env('OTEL_EXPORTER_TYPE', default='console')  # console, jaeger, otlp
OTEL_EXPORTER_JAEGER_ENDPOINT = env('OTEL_EXPORTER_JAEGER_ENDPOINT', default='http://localhost:14268/api/traces')
OTEL_EXPORTER_OTLP_ENDPOINT = env('OTEL_EXPORTER_OTLP_ENDPOINT', default='http://localhost:4317')
OTEL_RESOURCE_ATTRIBUTES = env('OTEL_RESOURCE_ATTRIBUTES', default='')

# Sentry Configuration
SENTRY_ENABLED = env.bool('SENTRY_ENABLED', default=False)
if SENTRY_ENABLED:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.celery import CeleryIntegration
    from sentry_sdk.integrations.redis import RedisIntegration
    
    sentry_sdk.init(
        dsn=env('SENTRY_DSN'),
        integrations=[
            DjangoIntegration(
                transaction_style='url',
                middleware_spans=True,
                signals_spans=True,
                cache_spans=True,
            ),
            CeleryIntegration(
                monitor_beat_tasks=True,
                propagate_traces=True,
            ),
            RedisIntegration(),
        ],
        traces_sample_rate=env.float('SENTRY_TRACES_SAMPLE_RATE', default=0.1),
        send_default_pii=False,
        debug=DEBUG,
        environment='development' if DEBUG else 'production',
    )

# Prometheus Metrics Configuration
PROMETHEUS_METRICS_ENABLED = env.bool('PROMETHEUS_METRICS_ENABLED', default=False)

# Django Health Check Configuration
HEALTH_CHECK = {
    'DISK_USAGE_MAX': 90,  # percent
    'MEMORY_MIN': 100,     # in MB
}

# Email Configuration (SendGrid SMTP)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'apikey'  # This is literal 'apikey' for SendGrid
EMAIL_HOST_PASSWORD = env('SENDGRID_API_KEY', default='na')
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default='noreply@eoxvantage.com')
SERVER_EMAIL = DEFAULT_FROM_EMAIL

# Email settings for invitations
INVITATION_EMAIL_SUBJECT = 'Invitation to join {organization_name} on Taruvi'
INVITATION_EXPIRES_DAYS = env.int('INVITATION_EXPIRES_DAYS', default=7)

# Caching Configuration
if DEBUG:
    # Use local memory cache for development (no Redis required)
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
        }
    }
    # Use database sessions for development
    SESSION_ENGINE = 'django.contrib.sessions.backends.db'
else:
    # Use Redis cache for production
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': env('REDIS_URL', default='redis://localhost:6379/1'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }
    # Use Redis sessions for production
    SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
    SESSION_CACHE_ALIAS = 'default'

# Django Cachalot (ORM query caching)
if env.bool('ORM_CACHE_ENABLED', default=False):
    INSTALLED_APPS += ['cachalot']
    CACHALOT_ENABLED = True
    CACHALOT_CACHE = 'default'

# Django Allauth Configuration
SITE_ID = 1

# Authentication backends
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
    
    # Django Guardian object-level permissions
    'guardian.backends.ObjectPermissionBackend',
]

# Guardian settings
ANONYMOUS_USER_NAME = None

# Allauth settings
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300  # 5 minutes
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True

# Social account settings
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'  # Email verification handled by account
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_STORE_TOKENS = True
SOCIALACCOUNT_AUTO_SIGNUP = True

# Login/logout URLs
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Jazzmin (Django Admin Theme) Configuration
JAZZMIN_SETTINGS = {
    "site_title": "Taruvi.cloud Admin",
    "site_header": "Taruvi.cloud",
    "site_brand": "Taruvi.cloud",
    "welcome_sign": "Welcome to Taruvi.cloud Platform Admin",
    "copyright": "Taruvi.cloud",
    "search_model": ["auth.User", "auth.Group", "core.Site", "core.Organization", "core.OrganizationMember", "socialaccount.SocialApp"],
    "topmenu_links": [
        {"name": "Platform Home", "url": "admin:index", "permissions": ["auth.view_user"]},
        {"name": "API Documentation", "url": "/api/docs/", "new_window": True},
        {"model": "auth.User"},
        {"app": "core"},
        {"app": "socialaccount"},
    ],
    "usermenu_links": [
        {"name": "API Documentation", "url": "/api/docs/", "new_window": True},
        {"name": "Platform Support", "url": "https://taruvi.cloud/support", "new_window": True},
        {"model": "auth.user"}
    ],
    "show_sidebar": True,
    "navigation_expanded": True,
    "order_with_respect_to": ["auth", "core", "socialaccount", "account", "django_celery_beat", "django_celery_results"],
    "custom_links": {
        "core": [{
            "name": "Health Check",
            "url": "/health/?format=json",
            "icon": "fas fa-heartbeat",
            "permissions": ["core.view_site"]
        }],
        "socialaccount": [{
            "name": "OAuth Providers Guide",
            "url": "#",
            "icon": "fas fa-book",
            "permissions": ["socialaccount.view_socialapp"]
        }]
    },
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
        "account": "fas fa-user-circle",
        "account.EmailAddress": "fas fa-envelope",
        "socialaccount": "fas fa-share-alt",
        "socialaccount.SocialApp": "fas fa-plug",
        "socialaccount.SocialAccount": "fas fa-user-friends",
        "socialaccount.SocialToken": "fas fa-key",
        "core.Site": "fas fa-building",
        "core.Domain": "fas fa-globe",
        "core.Organization": "fas fa-sitemap",
        "core.OrganizationMember": "fas fa-user-tie",
        "core.OrganizationSite": "fas fa-link",
        "core.OrganizationInvitation": "fas fa-envelope-open-text",
        "django_celery_beat.PeriodicTask": "fas fa-clock",
        "django_celery_beat.CrontabSchedule": "fas fa-calendar-alt",
        "django_celery_beat.IntervalSchedule": "fas fa-stopwatch",
        "django_celery_results.TaskResult": "fas fa-tasks",
    },
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",
    "related_modal_active": False,
    "custom_css": None,
    "custom_js": None,
    "use_google_fonts_cdn": True,
    "show_ui_builder": False,
    "changeform_format": "horizontal_tabs",
    "changeform_format_overrides": {
        "auth.user": "collapsible",
        "auth.group": "vertical_tabs",
        "socialaccount.socialapp": "horizontal_tabs"
    },
    "language_chooser": False,
}
#
ORGS_SLUGFIELD = 'django_extensions.db.fields.AutoSlugField'
